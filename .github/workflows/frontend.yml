name: Let's Code ADA Pipeline - Frontend

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  WORK_DIR: "./frontend/app"
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: letscodebyadd-frontend
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-frontend:
    name: Build e Testes
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup do Node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Cache dos módulos do Node
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Instalação das dependências
      working-directory: ${{ env.WORK_DIR }}
      run: npm install
      
    - name: Build da Aplicação
      working-directory: ${{ env.WORK_DIR }}
      run: npm run build -- --configuration=production
      
    - name: Testes da Aplicação
      working-directory: ${{ env.WORK_DIR }}
      run: npm run test
      
    - name: Upload dos Artefatos
      uses: actions/upload-artifact@v2
      with:
        name: letscodebyada-frt
        path: "${{ env.WORK_DIR }}/dist/"

  package-frontend:
    name: "[Backend] Geração de Imagem Docker"
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download do Artefato
      uses: actions/download-artifact@v3
      with:
        name: letscodebyada-fnt
        path: "${{ env.WORK_DIR }}/dist/"

    - name: Build Imagem do Docker
      uses: docker/build-push-action@v2
      with:
        context: "${{ env.WORK_DIR }}/Dockerfile"
        push: true
        tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        builder: docker.io/docker/dockerfile:1.2.1

    - name: Configurando Credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Enviando imagem para o ECR
      run: |
        docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest


